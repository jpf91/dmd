/************************ Array OP evaluation order tests *****************************************/
/+
1       2       3        (evaluation order)
|       |       |
a()[] = b()[] + c()[];   (array ops)
      |       |
      1       2          (operators)


1       2       3        (evaluation order)
|       |       |
a()   = b()  +  c();     (normal assignment)
+/

string order = "";
private int[4] arrbuf;
ref int[4] a()
{
    order ~= 'a';
    return arrbuf;
}
int[4] b()
{
    order ~= 'b';
    return [7,7,7,7];
}
int[4] c()
{
    order ~= 'c';
    return [2,2,2,2]; // a /= b - c; => c != b
}


int ibuff;
ref int ai()
{
    order ~= 'a';
    return ibuff;
}
int bi()
{
    order ~= 'b';
    return 7;
}
int ci()
{
    order ~= 'c';
    return 2; // a /= b - c; => c != b
}

//Autogenerated using this D script:
/+
void main()
{
    import std.stdio;
    string[] op1s = ["=", "+=", "-=", "*=", "/=", "%=", "^=", "&=", "|="];
    string checkBin = "    assert(order == \"abc\", \"expected 'abc', got '\" ~ order ~ \"'\");\n    order = \"\";\n";
    string checkUna = "    assert(order == \"ac\", \"expected 'ac', got '\" ~ order ~ \"'\");\n    order = \"\";\n";

    writeln("void testArrayOps()\n{");
    writeln("    //Binary array ops");
    foreach(string op1; op1s)
    {
        //binary
        foreach(string op2; ["+", "-", "*", "/", "%", "^", "&", "|"])
        {
            writefln("    a()[] %2s bi()  %2s ci();\n%s", op1, op2, checkBin);
            writefln("    a()[] %2s b()[] %2s ci();\n%s", op1, op2, checkBin);
            writefln("    a()[] %2s bi()  %2s c()[];\n%s", op1, op2, checkBin);
            writefln("    a()[] %2s b()[] %2s c()[];\n%s", op1, op2, checkBin);
        }
        
    }
    
    writeln("    //Unary array ops");    
    foreach(string op1; op1s)
    {
        //unary
        foreach(string op2; ["-", "~"])
        {
            writefln("    a()[] %2s %sci();\n%s", op1, op2, checkUna);
            writefln("    a()[] %2s %sc()[];\n%s", op1, op2, checkUna);
        }
        
    }
    writeln("}");
}
+/
void testArrayOps()
{
    //Binary array ops
    a()[]  = bi()   + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = b()[]  + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = bi()   + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = b()[]  + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = bi()   - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = b()[]  - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = bi()   - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = b()[]  - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = bi()   * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = b()[]  * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = bi()   * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = b()[]  * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = bi()   / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = b()[]  / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = bi()   / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = b()[]  / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = bi()   % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = b()[]  % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = bi()   % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = b()[]  % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = bi()   ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = b()[]  ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = bi()   ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = b()[]  ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = bi()   & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = b()[]  & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = bi()   & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = b()[]  & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = bi()   | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = b()[]  | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = bi()   | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[]  = b()[]  | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += bi()   + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += b()[]  + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += bi()   + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += b()[]  + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += bi()   - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += b()[]  - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += bi()   - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += b()[]  - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += bi()   * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += b()[]  * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += bi()   * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += b()[]  * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += bi()   / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += b()[]  / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += bi()   / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += b()[]  / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += bi()   % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += b()[]  % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += bi()   % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += b()[]  % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += bi()   ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += b()[]  ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += bi()   ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += b()[]  ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += bi()   & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += b()[]  & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += bi()   & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += b()[]  & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += bi()   | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += b()[]  | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += bi()   | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] += b()[]  | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= bi()   + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= b()[]  + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= bi()   + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= b()[]  + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= bi()   - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= b()[]  - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= bi()   - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= b()[]  - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= bi()   * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= b()[]  * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= bi()   * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= b()[]  * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= bi()   / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= b()[]  / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= bi()   / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= b()[]  / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= bi()   % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= b()[]  % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= bi()   % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= b()[]  % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= bi()   ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= b()[]  ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= bi()   ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= b()[]  ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= bi()   & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= b()[]  & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= bi()   & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= b()[]  & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= bi()   | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= b()[]  | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= bi()   | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] -= b()[]  | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= bi()   + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= b()[]  + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= bi()   + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= b()[]  + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= bi()   - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= b()[]  - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= bi()   - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= b()[]  - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= bi()   * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= b()[]  * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= bi()   * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= b()[]  * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= bi()   / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= b()[]  / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= bi()   / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= b()[]  / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= bi()   % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= b()[]  % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= bi()   % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= b()[]  % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= bi()   ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= b()[]  ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= bi()   ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= b()[]  ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= bi()   & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= b()[]  & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= bi()   & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= b()[]  & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= bi()   | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= b()[]  | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= bi()   | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] *= b()[]  | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= bi()   + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= b()[]  + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= bi()   + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= b()[]  + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= bi()   - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= b()[]  - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= bi()   - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= b()[]  - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= bi()   * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= b()[]  * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= bi()   * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= b()[]  * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= bi()   / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= b()[]  / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= bi()   / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= b()[]  / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= bi()   % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= b()[]  % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= bi()   % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= b()[]  % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= bi()   ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= b()[]  ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= bi()   ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= b()[]  ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= bi()   & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= b()[]  & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= bi()   & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= b()[]  & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= bi()   | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= b()[]  | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= bi()   | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] /= b()[]  | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= bi()   + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= b()[]  + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= bi()   + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= b()[]  + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= bi()   - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= b()[]  - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= bi()   - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= b()[]  - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= bi()   * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= b()[]  * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= bi()   * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= b()[]  * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= bi()   / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= b()[]  / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= bi()   / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= b()[]  / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= bi()   % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= b()[]  % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= bi()   % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= b()[]  % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= bi()   ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= b()[]  ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= bi()   ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= b()[]  ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= bi()   & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= b()[]  & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= bi()   & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= b()[]  & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= bi()   | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= b()[]  | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= bi()   | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] %= b()[]  | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= bi()   + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= b()[]  + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= bi()   + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= b()[]  + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= bi()   - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= b()[]  - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= bi()   - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= b()[]  - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= bi()   * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= b()[]  * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= bi()   * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= b()[]  * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= bi()   / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= b()[]  / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= bi()   / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= b()[]  / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= bi()   % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= b()[]  % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= bi()   % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= b()[]  % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= bi()   ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= b()[]  ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= bi()   ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= b()[]  ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= bi()   & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= b()[]  & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= bi()   & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= b()[]  & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= bi()   | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= b()[]  | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= bi()   | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] ^= b()[]  | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= bi()   + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= b()[]  + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= bi()   + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= b()[]  + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= bi()   - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= b()[]  - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= bi()   - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= b()[]  - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= bi()   * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= b()[]  * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= bi()   * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= b()[]  * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= bi()   / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= b()[]  / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= bi()   / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= b()[]  / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= bi()   % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= b()[]  % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= bi()   % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= b()[]  % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= bi()   ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= b()[]  ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= bi()   ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= b()[]  ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= bi()   & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= b()[]  & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= bi()   & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= b()[]  & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= bi()   | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= b()[]  | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= bi()   | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] &= b()[]  | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= bi()   + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= b()[]  + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= bi()   + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= b()[]  + c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= bi()   - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= b()[]  - ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= bi()   - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= b()[]  - c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= bi()   * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= b()[]  * ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= bi()   * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= b()[]  * c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= bi()   / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= b()[]  / ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= bi()   / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= b()[]  / c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= bi()   % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= b()[]  % ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= bi()   % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= b()[]  % c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= bi()   ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= b()[]  ^ ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= bi()   ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= b()[]  ^ c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= bi()   & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= b()[]  & ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= bi()   & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= b()[]  & c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= bi()   | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= b()[]  | ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= bi()   | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    a()[] |= b()[]  | c()[];
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";

    //Unary array ops
    a()[]  = -ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[]  = -c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[]  = ~ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[]  = ~c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] += -ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] += -c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] += ~ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] += ~c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] -= -ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] -= -c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] -= ~ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] -= ~c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] *= -ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] *= -c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] *= ~ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] *= ~c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] /= -ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] /= -c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] /= ~ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] /= ~c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] %= -ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] %= -c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] %= ~ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] %= ~c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] ^= -ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] ^= -c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] ^= ~ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] ^= ~c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] &= -ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] &= -c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] &= ~ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] &= ~c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] |= -ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] |= -c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] |= ~ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    a()[] |= ~c()[];
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

}

/*************************** Assignment evaluation order tests *****************************************/

void testAssign()
{
    ai() = ci();
    assert(order == "ac", "expected 'ac', got '" ~ order ~ "'");
    order = "";

    ai() = bi() + ci();
    assert(order == "abc", "expected 'abc', got '" ~ order ~ "'");
    order = "";
}

/************************ Function call evaluation order tests *****************************************/

extern(C) int dFunc(int x, int y, int z)
{
    order ~= 'D';
    return 1;
}

extern(C) int aFunc()
{
    order ~= 'A';
    return 1;
}

extern(C) int bFunc()
{
    order ~= 'B';
    return 1;
}

extern(C) int cFunc()
{
    order ~= 'C';
    return 1;
}

alias extern(C) int function(int, int, int) dg;

extern(C) dg eFunc()
{
    order ~= 'E';
    return &dFunc;
}

int dFuncD(int x, int y, int z)
{
    order ~= 'D';
    return 1;
}

int aFuncD()
{
    order ~= 'A';
    return 1;
}

int bFuncD()
{
    order ~= 'B';
    return 1;
}

int cFuncD()
{
    order ~= 'C';
    return 1;
}

int function(int, int, int) eFuncD()
{
    order ~= 'E';
    return &dFuncD;
}

void testCall()
{
    dFunc(aFunc(), bFunc(), cFunc());
    assert(order == "ABCD", "expected 'ABCD', got '" ~ order ~ "'");
    order = "";

    ai() = dFunc(aFunc(), bFunc(), cFunc()); //ABCaD
    assert(order == "aABCD", "expected 'aABCD', got '" ~ order ~ "'");
    order = "";

    ai() = dFunc(aFunc(), bFunc() + bi(), cFunc()); //ABbCaD
    assert(order == "aABbCD", "expected 'aABbCD', got '" ~ order ~ "'");
    order = "";

    ai() = eFunc()(aFunc(), bFunc() + bi(), cFunc());
    assert(order == "aEABbCD", "expected 'aEABbCD', got '" ~ order ~ "'");
    order = "";

    dFuncD(aFuncD(), bFuncD(), cFuncD());
    assert(order == "ABCD", "expected 'ABCD', got '" ~ order ~ "'");
    order = "";

    ai() = dFuncD(aFuncD(), bFuncD(), cFuncD());
    assert(order == "aABCD", "expected 'aABCD', got '" ~ order ~ "'");
    order = "";

    ai() = dFuncD(aFuncD(), bFuncD() + bi(), cFuncD());
    assert(order == "aABbCD", "expected 'aABbCD', got '" ~ order ~ "'");
    order = "";

    ai() = eFuncD()(aFuncD(), bFuncD() + bi(), cFuncD());
    assert(order == "aEABbCD", "expected 'aEABbCD', got '" ~ order ~ "'");
    order = "";
}

void main()
{
    testArrayOps();
    testAssign();
    testCall();
}
